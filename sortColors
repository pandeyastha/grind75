class Solution {
public:
    void sortColors(vector<int>& nums) {
        if (nums.size()==0) return ;
        int low=0, mid=0 , high= nums.size()-1;
        while(mid<=high){
            if(nums[mid]==0) swap(nums[mid++], nums[low++]);
            else if(nums[mid]==1) {
                mid++;
            }
            else if(nums[mid]==2) swap(nums[mid], nums[high--]);
        }
        
    }
};


/*
Discussion
constraints- 
len of arr ? 
any interference ?

Brute- 
sort T= O(nlogn)
sc= sort algo -> merger  o(nlogn)

Better -
count 0, 1 ,2   -> 1 pass
start putting 0 ,then 1 then 2 -> 1 pass 

TC= O(2*n)
sc=O(1)

Optimized -

[2,0,2,1,1,0]
somehow we need to swap in 1 pass 
use  3 pointers , one to fix start edge , another for end edge and 1 moving pointer
the moving pointer will swap for 0 or 2 depending , and if 1 , we move along 

[2,0,2,1,1,0] lo1=0 mid=0 high=5
first - low -0 mid-1 high-5   low++
sec- swpa mid & high , high=4 mid=1
third mid=1 low=1 swap , low++ mid++;  0 0 2 1 1 2
fourth - swpa mid high , high=3 mid=2 ; 0 0 1 1 2 2
fifth - mid=2 low=2 swpa mid++; low++;


-- if we sort 0 & 2 , automatically in bw will be sorted 

Tc= O(n) 
sp= O(n)





*/
